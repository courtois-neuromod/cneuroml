:py:mod:`cneuroml.deeplearning.common.datamodule.vision.mnist`
==============================================================

.. py:module:: cneuroml.deeplearning.common.datamodule.vision.mnist

.. autoapi-nested-parse::

   .



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cneuroml.deeplearning.common.datamodule.vision.mnist.MNISTDataModule




.. py:class:: MNISTDataModule(config: cneuroml.deeplearning.common.datamodule.BaseDataModuleConfig, val_percentage: float = 0.1, transform: torchvision.transforms.Compose | None = transforms.ToTensor)


   Bases: :py:obj:`cneuroml.deeplearning.common.datamodule.BaseDataModule`

   .

   .. attribute:: config

      .

      :type: ``BaseDataModuleConfig``

   .. attribute:: dataset (``dict[Literal["train", "val", "test", "predict"],

      Dataset]``): .

   .. attribute:: train_val_split

      The train/validation
      split (sums to 1).

      :type: ``list[float, float]``

   .. attribute:: transforms

      The
      transformation(s) to apply to the dataset.

      :type: ``torchvision.transforms.Compose``

   Calls parent constructor and stores arguments.

   :param config: .
   :param val_percentage: Percentage of the training dataset to use
                          for validation.
   :param transform: The transformation(s) to apply to the dataset.

   .. py:method:: prepare_data() -> None

      Downloads the MNIST dataset.


   .. py:method:: setup(stage: str) -> None

      Creates the train/val/test datasets.

      :param stage: ``"fit"`` or ``"test"``.



