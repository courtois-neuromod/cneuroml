:py:mod:`cneuromax.deeplearning.common.datamodule`
==================================================

.. py:module:: cneuromax.deeplearning.common.datamodule

.. autoapi-nested-parse::

   Lightning Data Modules.



Subpackages
-----------
.. toctree::
   :titlesonly:
   :maxdepth: 3

   vision/index.rst


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   base/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   cneuromax.deeplearning.common.datamodule.BaseDataModule
   cneuromax.deeplearning.common.datamodule.BaseDataModuleConfig
   cneuromax.deeplearning.common.datamodule.BaseDataset




.. py:class:: BaseDataModule(config: BaseDataModuleConfig)


   Bases: :py:obj:`lightning.pytorch.LightningDataModule`

   .

   With ``stage`` being any of ``"train"``, ``"val"``, ``"test"`` or
   ``"predict"``, children of this class need to properly define
   ``dataset[stage]`` instance attribute(s) for each desired ``stage``.

   .. attribute:: config

      .

      :type: ``BaseDataModuleConfig``

   .. attribute:: dataset

      .

      :type: ``dict[Literal["train", "val", "test", "predict"], Dataset]``

   .. attribute:: pin_memory

      Whether to copy tensors into device
      pinned memory before returning them (is set to ``True`` by
      default if using GPUs).

      :type: ``bool``

   Calls parent constructor.

   :param config: .

   .. py:method:: load_state_dict(state_dict: dict[Annotated[str, beartype.vale.Is[lambda x: x in 'per_device_batch_size']], Annotated[int, beartype.vale.Is[lambda x: x > 0]]]) -> None

      Sets the instance's batch size from a dictionary value.

      :param state_dict: .


   .. py:method:: state_dict() -> dict[Annotated[str, beartype.vale.Is[lambda x: x in 'per_device_batch_size']], Annotated[int, beartype.vale.Is[lambda x: x > 0]]]

      .

      :returns: The instance's batch size inside a dictionary.


   .. py:method:: train_dataloader() -> torch.utils.data.DataLoader[torch.Tensor]

      .

      :returns: A new training PyTorch ``DataLoader`` instance.

      :raises AttributeError: If the instance's ``dataset.train``
          attribute is ``None``.


   .. py:method:: val_dataloader() -> torch.utils.data.DataLoader[torch.Tensor]

      .

      :returns: A new validation PyTorch ``DataLoader`` instance.

      :raises AttributeError: If the instance's ``dataset.val`` attribute
          is ``None``.


   .. py:method:: test_dataloader() -> torch.utils.data.DataLoader[torch.Tensor]

      .

      :returns: A new testing PyTorch ``DataLoader`` instance.

      :raises AttributeError: If the instance's ``dataset.test``
          attribute is ``None``.


   .. py:method:: predict_dataloader() -> torch.utils.data.DataLoader[torch.Tensor]

      .

      The predict PyTorch ``DataLoader`` instance does not shuffle the
      dataset.

      :returns: A new prediction PyTorch ``DataLoader`` instance.

      :raises AttributeError: If the instance's ``dataset.predict``
          attribute is ``None``.



.. py:class:: BaseDataModuleConfig


   .

   .. attribute:: data_dir

      Path to the data directory.

   .. attribute:: per_device_batch_size

      Per-device number of samples to load
      per iteration.

   .. attribute:: per_device_num_workers

      Per-device number of CPU processes to
      use for data loading (``0`` means that the data will be
      loaded by each device's assigned CPU process)

   .. attribute:: device_type

      The compute device type to use (``cpu`` or
      ``gpu``).

   .. py:attribute:: data_dir
      :type: str
      :value: '${data_dir}'

      

   .. py:attribute:: per_device_batch_size
      :type: Annotated[int, beartype.vale.Is[lambda x: x > 0]]
      :value: 1

      

   .. py:attribute:: per_device_num_workers
      :type: Annotated[int, beartype.vale.Is[lambda x: x >= 0]]
      :value: 0

      

   .. py:attribute:: device_type
      :type: Annotated[str, beartype.vale.Is[lambda x: x in ('cpu', 'gpu')]]
      :value: 'gpu'

      


.. py:class:: BaseDataset


   .

   .. attribute:: train

      .

   .. attribute:: val

      .

   .. attribute:: test

      .

   .. attribute:: predict

      .

   .. py:attribute:: train
      :type: torch.utils.data.Dataset[torch.Tensor] | None

      

   .. py:attribute:: val
      :type: torch.utils.data.Dataset[torch.Tensor] | None

      

   .. py:attribute:: test
      :type: torch.utils.data.Dataset[torch.Tensor] | None

      

   .. py:attribute:: predict
      :type: torch.utils.data.Dataset[torch.Tensor] | None

      


