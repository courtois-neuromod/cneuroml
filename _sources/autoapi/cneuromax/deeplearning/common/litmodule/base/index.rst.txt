:py:mod:`cneuromax.deeplearning.common.litmodule.base`
======================================================

.. py:module:: cneuromax.deeplearning.common.litmodule.base

.. autoapi-nested-parse::

   .



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cneuromax.deeplearning.common.litmodule.base.BaseLitModule




.. py:class:: BaseLitModule(nnmodule: torch.nn.Module, optimizer: functools.partial[torch.optim.Optimizer], lrscheduler: functools.partial[torch.optim.lr_scheduler.LRScheduler])


   Bases: :py:obj:`lightning.pytorch.LightningModule`

   .

   Subclasses need to implement the ``step`` instance method.

   .. attribute:: nnmodule

      .

      :type: ``nn.Module``

   .. attribute:: optimizer

      .

      :type: ``Optimizer``

   .. attribute:: lrscheduler

      .

      :type: ``LRScheduler``

   .

   Calls parent constructor, stores arguments, and instantiates
   from partial functions.

   :param nnmodule: A PyTorch ``nn.Module`` instance.
   :param optimizer: A PyTorch ``Optimizer`` partial function.
   :param lrscheduler: A PyTorch ``LRScheduler`` partial
                       function.

   .. py:method:: training_step(batch: jaxtyping.Num[torch.Tensor,  ...] | tuple[jaxtyping.Num[torch.Tensor,  ...], Ellipsis] | list[jaxtyping.Num[torch.Tensor,  ...]]) -> jaxtyping.Num[torch.Tensor,  ...]

      .

      :param batch: .

      :returns: The loss value(s).

      :raises AttributeError: If the ``step`` instance method is not
          callable.


   .. py:method:: validation_step(batch: jaxtyping.Num[torch.Tensor,  ...] | tuple[jaxtyping.Num[torch.Tensor,  ...], Ellipsis] | list[jaxtyping.Num[torch.Tensor,  ...]], *args: Any, **kwargs: Any) -> jaxtyping.Num[torch.Tensor,  ...]

      .

      :param batch: .
      :param \*args: .
      :param \*\*kwargs: .

      :returns: The loss value(s).

      :raises AttributeError: If the ``step`` instance method is not
          callable.


   .. py:method:: test_step(batch: jaxtyping.Num[torch.Tensor,  ...] | tuple[jaxtyping.Num[torch.Tensor,  ...], Ellipsis] | list[jaxtyping.Num[torch.Tensor,  ...]]) -> jaxtyping.Num[torch.Tensor,  ...]

      .

      :param batch: .

      :returns: The loss value(s).

      :raises AttributeError: If ``step`` instance method is not
          callable.


   .. py:method:: configure_optimizers() -> tuple[list[torch.optim.Optimizer], list[dict[str, torch.optim.lr_scheduler.LRScheduler | str | int]]]

      .

      :returns: A tuple containing the PyTorch ``Optimizer`` and
                ``LRScheduler`` instance attributes (each nested in a
                list).



