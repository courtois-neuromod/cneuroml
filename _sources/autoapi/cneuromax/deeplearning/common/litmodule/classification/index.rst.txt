:py:mod:`cneuromax.deeplearning.common.litmodule.classification`
================================================================

.. py:module:: cneuromax.deeplearning.common.litmodule.classification

.. autoapi-nested-parse::

   .



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   base/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   cneuromax.deeplearning.common.litmodule.classification.BaseClassificationLitModule




.. py:class:: BaseClassificationLitModule(nnmodule: torch.nn.Module, optimizer_partial: functools.partial[torch.optim.Optimizer], scheduler_partial: functools.partial[torch.optim.lr_scheduler.LRScheduler], num_classes: int)


   Bases: :py:obj:`cneuromax.deeplearning.common.litmodule.BaseLitModule`

   .

   .. attribute:: accuracy

      The accuracy metric.

      :type: ``torchmetrics.Accuracy``

   .. attribute:: nnmodule

      .

      :type: ``nn.Module``

   .. attribute:: optimizer

      .

      :type: ``Optimizer``

   .. attribute:: scheduler

      .

      :type: ``LRScheduler``

   Calls parent constructor and creates an accuracy metric.

   :param nnmodule: .
   :param optimizer_partial: .
   :param scheduler_partial: .
   :param num_classes: .

   .. py:method:: step(batch: tuple[jaxtyping.Float[torch.Tensor,  batch_size *x_shape], jaxtyping.Int[torch.Tensor,  batch_size]], stage: Literal[train, val, test]) -> jaxtyping.Float[torch.Tensor,  ]

      Computes accuracy and cross entropy loss.

      :param batch: .
      :param stage: .

      :returns: The cross entropy loss.



