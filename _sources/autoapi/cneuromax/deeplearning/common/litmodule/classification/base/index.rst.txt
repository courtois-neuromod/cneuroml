:py:mod:`cneuromax.deeplearning.common.litmodule.classification.base`
=====================================================================

.. py:module:: cneuromax.deeplearning.common.litmodule.classification.base

.. autoapi-nested-parse::

   .



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cneuromax.deeplearning.common.litmodule.classification.base.BaseClassificationLitModuleConfig
   cneuromax.deeplearning.common.litmodule.classification.base.BaseClassificationLitModule




.. py:class:: BaseClassificationLitModuleConfig


   .

   .. attribute:: num_classes

      .

   .. py:attribute:: num_classes
      :type: int

      


.. py:class:: BaseClassificationLitModule(nnmodule: torch.nn.Module, optimizer: functools.partial[torch.optim.Optimizer], lrscheduler: functools.partial[torch.optim.lr_scheduler.LRScheduler], config: BaseClassificationLitModuleConfig)


   Bases: :py:obj:`cneuromax.deeplearning.common.litmodule.BaseLitModule`

   .

   .. attribute:: accuracy

      The accuracy metric.

      :type: ``torchmetrics.Accuracy``

   .. attribute:: config

      .

      :type: ``BaseClassificationLitModuleConfig``

   Calls parent constructor and creates an accuracy metric.

   :param nnmodule: .
   :param optimizer: .
   :param lrscheduler: .
   :param config: .

   .. py:method:: step(batch: tuple[jaxtyping.Float[torch.Tensor,  batch_size *x_shape], jaxtyping.Int[torch.Tensor,  batch_size]], stage: Literal[train, val, test]) -> jaxtyping.Float[torch.Tensor,  ]

      Computes accuracy and cross entropy loss.

      :param batch: .
      :param stage: .

      :returns: The cross entropy loss.



