:py:mod:`cneuromax.deeplearning.experiment.mnist_classification.datamodule`
===========================================================================

.. py:module:: cneuromax.deeplearning.experiment.mnist_classification.datamodule

.. autoapi-nested-parse::

   .



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   cneuromax.deeplearning.experiment.mnist_classification.datamodule.MNISTClassificationDataModuleConfig
   cneuromax.deeplearning.experiment.mnist_classification.datamodule.MNISTClassificationDataModule




.. py:class:: MNISTClassificationDataModuleConfig


   Bases: :py:obj:`cneuromax.deeplearning.common.datamodule.BaseDataModuleConfig`

   .

   .. py:attribute:: val_percentage
      :type: cneuromax.common.utils.annotations.float_is_ge0_le1

      

   .. py:attribute:: fit_dataset_mean
      :type: tuple[float]
      :value: (0.1307,)

      

   .. py:attribute:: fit_dataset_std
      :type: tuple[float]
      :value: (0.3081,)

      


.. py:class:: MNISTClassificationDataModule(config: MNISTClassificationDataModuleConfig)


   Bases: :py:obj:`cneuromax.deeplearning.common.datamodule.BaseDataModule`

   .

   .. attribute:: train_val_split

      The train/validation
      split (sums to ``1``).

      :type: ``tuple[float, float]``

   .. attribute:: transform

      The ``torchvision`` dataset
      transformations.

      :type: ``transforms.Compose``

   .

   Calls parent constructor, type-hints the config, sets the
   train/val split and creates the dataset transform.

   :param config: .

   .. py:method:: prepare_data() -> None

      Downloads the MNIST dataset.


   .. py:method:: setup(stage: cneuromax.common.utils.annotations.str_is_fit_or_test) -> None

      Creates the train/val/test datasets.

      :param stage: .



