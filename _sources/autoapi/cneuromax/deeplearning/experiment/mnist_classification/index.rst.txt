:py:mod:`cneuromax.deeplearning.experiment.mnist_classification`
================================================================

.. py:module:: cneuromax.deeplearning.experiment.mnist_classification

.. autoapi-nested-parse::

   .



Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   datamodule/index.rst
   datamodule_test/index.rst
   litmodule/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   cneuromax.deeplearning.experiment.mnist_classification.MNISTClassificationDataModule
   cneuromax.deeplearning.experiment.mnist_classification.MNISTClassificationDataModuleConfig
   cneuromax.deeplearning.experiment.mnist_classification.MNISTClassificationLitModule




.. py:class:: MNISTClassificationDataModule(config: MNISTClassificationDataModuleConfig)


   Bases: :py:obj:`cneuromax.deeplearning.common.datamodule.BaseDataModule`

   .

   .. attribute:: train_val_split

      The train/validation
      split (sums to ``1``).

      :type: ``tuple[float, float]``

   .. attribute:: transform

      The ``torchvision`` dataset
      transformations.

      :type: ``transforms.Compose``

   .

   Calls parent constructor, type-hints the config, sets the
   train/val split and creates the dataset transform.

   :param config: .

   .. py:method:: prepare_data() -> None

      Downloads the MNIST dataset.


   .. py:method:: setup(stage: cneuromax.common.utils.annotations.str_is_fit_or_test) -> None

      Creates the train/val/test datasets.

      :param stage: .



.. py:class:: MNISTClassificationDataModuleConfig


   Bases: :py:obj:`cneuromax.deeplearning.common.datamodule.BaseDataModuleConfig`

   .

   .. py:attribute:: val_percentage
      :type: cneuromax.common.utils.annotations.float_is_ge0_le1

      

   .. py:attribute:: fit_dataset_mean
      :type: tuple[float]
      :value: (0.1307,)

      

   .. py:attribute:: fit_dataset_std
      :type: tuple[float]
      :value: (0.3081,)

      


.. py:class:: MNISTClassificationLitModule(nnmodule: torch.nn.Module, optimizer: functools.partial[torch.optim.Optimizer], lrscheduler: functools.partial[torch.optim.lr_scheduler.LRScheduler])


   Bases: :py:obj:`cneuromax.deeplearning.common.litmodule.classification.BaseClassificationLitModule`

   .

   .. attribute:: accuracy

      The accuracy metric.

      :type: ``torchmetrics.Accuracy``

   .. attribute:: nnmodule

      .

      :type: ``nn.Module``

   .. attribute:: optimizer

      .

      :type: ``Optimizer``

   .. attribute:: scheduler

      .

      :type: ``LRScheduler``

   Calls parent constructor.

   :param nnmodule: A PyTorch ``nn.Module`` instance.
   :param optimizer: A PyTorch ``Optimizer`` partial function.
   :param lrscheduler: A PyTorch ``LRScheduler`` partial
                       function.

   .. py:method:: forward(x: jaxtyping.Float[torch.Tensor,  batch_size 1 28 28]) -> jaxtyping.Float[torch.Tensor,  batch_size 10]

      Simple pass through the PyTorch ``nn.Module``.

      :param x: The batched MNIST images.

      :returns: The batched output logits.



